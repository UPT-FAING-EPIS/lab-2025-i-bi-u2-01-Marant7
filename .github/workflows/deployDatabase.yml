name: Deploy Database Schemas
on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'liquibase/**'
      - '.github/workflows/deployDatabase.yml'

env:
  DB_SERVER: "${{ secrets.AZURE_SQL_SERVER }}.database.windows.net"
  DB_USER: "${{ secrets.SQL_USER }}@${{ secrets.AZURE_SQL_SERVER }}"  # Formato usuario@servidor
  DB_PASSWORD: "${{ secrets.SQL_PASS }}"
  LIQUIBASE_VERSION: "4.27.0"

jobs:
  deploy-dimensional-models:
    name: Deploy Dimensional Models
    runs-on: ubuntu-latest
    strategy:
      matrix:
        model:
          - { folder: 'modelo01', db_name: 'dw_envios', sql_file: 'modelo01_envios.sql' }
          - { folder: 'modelo02', db_name: 'dw_reservas_viaje', sql_file: 'modelo02_reservas.sql' }
          - { folder: 'modelo03', db_name: 'dw_gestion_proyectos', sql_file: 'modelo03_proyectos.sql' }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SQLCMD (alternative method)
        run: |
          # Descargar directamente los paquetes .deb para Ubuntu 22.04 (compatibles)
          wget https://packages.microsoft.com/ubuntu/22.04/prod/pool/main/m/msodbcsql18/msodbcsql18_18.3.2.1-1_amd64.deb -O /tmp/msodbcsql18.deb
          wget https://packages.microsoft.com/ubuntu/22.04/prod/pool/main/m/mssql-tools/mssql-tools_18.3.1.1-1_amd64.deb -O /tmp/mssql-tools.deb
          
          # Instalar dependencias
          sudo apt-get update
          sudo apt-get install -y unixodbc-dev
          
          # Instalar los paquetes descargados
          sudo dpkg -i /tmp/msodbcsql18.deb
          sudo dpkg -i /tmp/mssql-tools.deb
          sudo apt-get install -f -y
          
          # Configurar PATH
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $HOME/.bashrc
          source $HOME/.bashrc

      - name: Verify database connection
        run: |
          if ! sqlcmd -S "${{ env.DB_SERVER }}" -U "${{ env.DB_USER }}" -P "${{ env.DB_PASSWORD }}" -d "master" -Q "SELECT 1" -l 30; then
            echo "::error::Failed to connect to SQL Server"
            exit 1
          fi

      - name: Install Liquibase
        run: |
          wget https://github.com/liquibase/liquibase/releases/download/v${{ env.LIQUIBASE_VERSION }}/liquibase-${{ env.LIQUIBASE_VERSION }}.tar.gz -O /tmp/liquibase.tar.gz
          sudo mkdir -p /opt/liquibase
          sudo tar -xzf /tmp/liquibase.tar.gz -C /opt/liquibase
          sudo ln -s /opt/liquibase/liquibase /usr/local/bin/liquibase
          wget https://repo1.maven.org/maven2/com/microsoft/sqlserver/mssql-jdbc/12.4.2.jre11/mssql-jdbc-12.4.2.jre11.jar -O /tmp/sqljdbc.jar
          echo "LIQUIBASE_CLASSPATH=/tmp/sqljdbc.jar" >> $GITHUB_ENV

      - name: Apply database changes
        run: |
          liquibase \
            --url="jdbc:sqlserver://${{ env.DB_SERVER }}:1433;database=${{ matrix.model.db_name }};encrypt=true;trustServerCertificate=true" \
            --username="${{ env.DB_USER }}" \
            --password="${{ env.DB_PASSWORD }}" \
            --driver="com.microsoft.sqlserver.jdbc.SQLServerDriver" \
            --classpath="${{ env.LIQUIBASE_CLASSPATH }}" \
            --changeLogFile="liquibase/changelog/${{ matrix.model.folder }}/changelog-master.xml" \
            --logLevel=debug \
            update
